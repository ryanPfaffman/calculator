"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mime = require("mime");
const fallback_loader_1 = require("./fallback-loader");
exports.getExtension = (filePath) => {
    var _a;
    const mimeType = (_a = mime.getType(filePath), (_a !== null && _a !== void 0 ? _a : ""));
    return mime.getExtension(mimeType);
};
const generateURIByFallbackLoader = (loaderContext, source, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { loader, loaderOptions } = fallback_loader_1.getFallbackLoader(options.fallback);
    const fallbackLoader = typeof loader === "string" ? (yield Promise.resolve().then(() => require(loader))) : loader;
    const context = Object.assign(Object.assign({}, loaderContext), { query: loaderOptions });
    const exportModuleCode = fallbackLoader.call(context, source);
    const body = exportModuleCode.replace(/module.exports.*?=\s*?/, "").replace(/export default\s*?/, "");
    return body;
});
exports.generateURI = (loaderContext, source, filePath, options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const imageMimeType = (_a = mime.getType(filePath), (_a !== null && _a !== void 0 ? _a : ""));
    const sizeLimit = options.sizeLimit;
    if (sizeLimit != undefined && source.length <= sizeLimit) {
        const base64URI = source.toString("base64");
        return JSON.stringify(`data:${imageMimeType};base64,${base64URI}`);
    }
    return generateURIByFallbackLoader(loaderContext, source, options);
});
