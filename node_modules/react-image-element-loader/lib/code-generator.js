"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const svgToJSX = require("svg-to-jsx");
const file_utilities_1 = require("./file-utilities");
const generateJSXFromSVG = (svg) => __awaiter(void 0, void 0, void 0, function* () {
    const promise = svgToJSX(svg);
    const onFulfilled = (jsx) => {
        const code = jsx.replace(/<svg(.*?)>/, "<svg$1 {...props}>");
        return `(function(props) { return ${code} });`;
    };
    const onRejected = () => "{}";
    return promise.then(onFulfilled).catch(onRejected);
});
const generateJSXFromRasterImages = () => __awaiter(void 0, void 0, void 0, function* () {
    return `
  (function(props) {
    var newProps = Object.assign({}, props, { src: imagePath });

    return <img {...newProps} />;
  });
`;
});
exports.generateElementFunctionCode = (source, filePath) => {
    const isSVG = file_utilities_1.getExtension(filePath) === "svg";
    return isSVG ? generateJSXFromSVG(source.toString("utf8")) : generateJSXFromRasterImages();
};
exports.generateModuleCode = (imageURI, jsxCode) => `
  var React = require("react");
  var imagePath = ${imageURI};

  Object.defineProperty(exports, "__esModule", { value: true });
  exports.default = imagePath;
  exports.element = ${jsxCode};
`;
